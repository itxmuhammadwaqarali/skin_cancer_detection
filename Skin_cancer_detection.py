# -*- coding: utf-8 -*-
"""Untitled13.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Qa3FVhrqtvyJq28j6CmMN0v4tbfXg0_-
"""

import os
import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.models import Model, Sequential
from tensorflow.keras.layers import Dense, Flatten, Dropout, GlobalAveragePooling2D
from sklearn.metrics import classification_report, confusion_matrix
import matplotlib.pyplot as plt

# Set up directories
data_dir = '/content/ISIC_dataset/'
train_dir = os.path.join(data_dir, 'train')
val_dir = os.path.join(data_dir, 'val')
test_dir = os.path.join(data_dir, 'test')

# Data Preprocessing
image_size = (224, 224)
batch_size = 32

def preprocess_data(directory):
    return ImageDataGenerator(
        rescale=1.0 / 255.0,
        rotation_range=20,
        width_shift_range=0.2,
        height_shift_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True
    ).flow_from_directory(
        directory,
        target_size=image_size,
        batch_size=batch_size,
        class_mode='binary'
    )

train_data = preprocess_data(train_dir)
val_data = ImageDataGenerator(rescale=1.0 / 255.0).flow_from_directory(
    val_dir, target_size=image_size, batch_size=batch_size, class_mode='binary'
)
test_data = ImageDataGenerator(rescale=1.0 / 255.0).flow_from_directory(
    test_dir, target_size=image_size, batch_size=batch_size, class_mode='binary'
)

# Model Development
base_model = ResNet50(weights='imagenet', include_top=False, input_shape=(224, 224, 3))
base_model.trainable = False

model = Sequential([
    base_model,
    GlobalAveragePooling2D(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
history = model.fit(
    train_data,
    validation_data=val_data,
    epochs=10,
    steps_per_epoch=len(train_data),
    validation_steps=len(val_data)
)

# Fine-tuning the model
base_model.trainable = True
model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=1e-5),
              loss='binary_crossentropy', metrics=['accuracy'])

fine_tune_history = model.fit(
    train_data,
    validation_data=val_data,
    epochs=5,
    steps_per_epoch=len(train_data),
    validation_steps=len(val_data)
)

# Evaluation
loss, accuracy = model.evaluate(test_data)
print(f"Test Accuracy: {accuracy * 100:.2f}%")

y_true = test_data.classes
y_pred = (model.predict(test_data) > 0.5).astype('int32')

print("Classification Report:")
print(classification_report(y_true, y_pred, target_names=['Benign', 'Malignant']))

# Confusion Matrix
conf_matrix = confusion_matrix(y_true, y_pred)
plt.figure(figsize=(8, 6))
plt.title("Confusion Matrix")
plt.imshow(conf_matrix, cmap='Blues', interpolation='nearest')
plt.colorbar()
plt.xticks([0, 1], ['Benign', 'Malignant'])
plt.yticks([0, 1], ['Benign', 'Malignant'])
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.show()

# Save the model
model.save('skin_cancer_detection_model.h5')